{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.1"
    },
    "varInspector": {
      "cols": {
        "lenName": 16,
        "lenType": 16,
        "lenVar": 40
      },
      "kernels_config": {
        "python": {
          "delete_cmd_postfix": "",
          "delete_cmd_prefix": "del ",
          "library": "var_list.py",
          "varRefreshCmd": "print(var_dic_list())"
        },
        "r": {
          "delete_cmd_postfix": ") ",
          "delete_cmd_prefix": "rm(",
          "library": "var_list.r",
          "varRefreshCmd": "cat(var_dic_list()) "
        }
      },
      "position": {
        "height": "144px",
        "left": "1090px",
        "right": "20px",
        "top": "13px",
        "width": "350px"
      },
      "types_to_exclude": [
        "module",
        "function",
        "builtin_function_or_method",
        "instance",
        "_Feature"
      ],
      "window_display": true
    },
    "colab": {
      "name": "bicycle_model.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "gpGPl3rxD5bt"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib notebook\n",
        "import doctest\n",
        "import copy"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cy-IHdN_D5bv"
      },
      "source": [
        "#https://stackoverflow.com/questions/40137950/possible-to-run-python-doctest-on-a-jupyter-cell-function\n",
        "def test(func):\n",
        "    '''\n",
        "    Use test as a decorator to a function with doctests in Jupyter notebook. \n",
        "    Run the cell to see the results of the doctests.\n",
        "    '''\n",
        "    globs = copy.copy(globals())\n",
        "    globs.update({func.__name__:func})\n",
        "    doctest.run_docstring_examples(func, globs, verbose=True, name=func.__name__)\n",
        "    return func"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wItZX1gwD5bw"
      },
      "source": [
        "### Simulate straight line and circular movements with Bicycle model\n",
        "\n",
        "Robot is at the origin (0, 0) and facing North, i.e, $\\theta = \\pi/2$. Assume the wheelbase of the vehicle $L$ = 0.9 m"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zeb2OgYeD5bx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "76d05ad9-56c5-413c-a9cd-3f4cb8a14a26"
      },
      "source": [
        "\n",
        "#uncomment this decorator to test your code\n",
        "@test \n",
        "def bicycle_model(curr_pose, v, delta, dt=1.0):\n",
        "    '''\n",
        "    >>> bicycle_model((0.0,0.0,0.0), 1.0, 0.0)\n",
        "    (1.0, 0.0, 0.0)\n",
        "    >>> bicycle_model((0.0,0.0,0.0), 0.0, np.pi/4)\n",
        "    (0.0, 0.0, 0.0)\n",
        "    >>> bicycle_model((0.0, 0.0, 0.0), 1.0, np.pi/4)\n",
        "    (1.0, 0.0, 1.11)\n",
        "    '''\n",
        "    ## write code to calculate next_pose\n",
        "    # refer to the kinematic equations of a unicycle model\n",
        "    L = 0.9\n",
        "    x, y, theta = curr_pose\n",
        "    x += v*np.cos(theta)*dt\n",
        "    y += v*np.sin(theta)*dt\n",
        "    theta += (v/L)*np.tan(delta)*dt\n",
        "    theta = round(theta, 2)\n",
        "    \n",
        "    # Keep theta bounded between [-pi, pi]\n",
        "    theta = np.arctan2(np.sin(theta), np.cos(theta))\n",
        "    # return calculated (x, y, theta)\n",
        "    return x, y, theta"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "PYDEV DEBUGGER WARNING:\n",
            "sys.settrace() should not be used when the debugger is being used.\n",
            "This may cause the debugger to stop working correctly.\n",
            "If this is needed, please check: \n",
            "http://pydev.blogspot.com/2007/06/why-cant-pydev-debugger-work-with.html\n",
            "to see how to restore the debug tracing back correctly.\n",
            "Call Location:\n",
            "  File \"/usr/lib/python3.7/doctest.py\", line 1487, in run\n",
            "    sys.settrace(save_trace)\n",
            "\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Finding tests in bicycle_model\n",
            "Trying:\n",
            "    bicycle_model((0.0,0.0,0.0), 1.0, 0.0)\n",
            "Expecting:\n",
            "    (1.0, 0.0, 0.0)\n",
            "ok\n",
            "Trying:\n",
            "    bicycle_model((0.0,0.0,0.0), 0.0, np.pi/4)\n",
            "Expecting:\n",
            "    (0.0, 0.0, 0.0)\n",
            "ok\n",
            "Trying:\n",
            "    bicycle_model((0.0, 0.0, 0.0), 1.0, np.pi/4)\n",
            "Expecting:\n",
            "    (1.0, 0.0, 1.11)\n",
            "ok\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rkAm7KZ5D5by"
      },
      "source": [
        "#straight line\n",
        "straight_trajectory = []\n",
        "pose = (0, 0, np.pi/2)\n",
        "steps = 10\n",
        "#fill in v and omega values\n",
        "all_v = np.ones(steps)\n",
        "all_delta = np.zeros(steps) \n",
        "\n",
        "for v, delta in zip(all_v, all_delta):\n",
        "    #instruction to take v, delta and compute new pose    \n",
        "    straight_trajectory.append(pose)\n",
        "    pose = bicycle_model(pose, v, delta)\n",
        "    # store new pose\n",
        "straight_trajectory = np.array(straight_trajectory)\n",
        "    "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9fNbts6TD5bz"
      },
      "source": [
        "#circle\n",
        "circle_trajectory = []\n",
        "pose = (0, 0, np.pi/2)\n",
        "steps = 10\n",
        "#fill in v and omega values\n",
        "all_v = np.ones(steps*10)\n",
        "all_delta = np.ones(steps*10)\n",
        "\n",
        "for v, delta in zip(all_v, all_delta):\n",
        "    #instruction to take v, delta and compute new pose    \n",
        "    circle_trajectory.append(pose)\n",
        "    pose = bicycle_model(pose, v, delta, 0.1)\n",
        "    # store new pose\n",
        "circle_trajectory = np.array(circle_trajectory)  \n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RS90vnzYD5b0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "outputId": "82a0d737-b863-4f0f-aea7-6a31466c0440"
      },
      "source": [
        "### Plot straight and circular trajectories\n",
        "plt.figure()\n",
        "plt.axes().set_aspect(\"equal\", \"datalim\")\n",
        "plt.plot(straight_trajectory[:, 0], straight_trajectory[:,1])\n",
        "\n",
        "\n",
        "plt.figure()\n",
        "plt.axes().set_aspect(\"equal\", \"datalim\")\n",
        "plt.plot(circle_trajectory[:, 0], circle_trajectory[:,1])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f25a49f1310>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KPMhUJJBD5b1"
      },
      "source": [
        "### Simulate Bicycle model with Open Loop control\n",
        "\n",
        "We want the robot to follow these instructions\n",
        "\n",
        "**straight 10m, right turn, straight 5m, left turn, straight 8m, right turn**\n",
        "\n",
        "It is in open loop; control commands have to be calculated upfront. How do we do it?\n",
        "\n",
        "To keep things simple in the first iteration, we can fix $v = v_c$ and change only $\\delta$. To make it even simpler, $\\delta$ can take only 2 values \n",
        "+ 0 when the vehicle is going straight \n",
        "+ $\\delta = \\delta_c$ when turning\n",
        "\n",
        "This leaves only 2 questions to be answered\n",
        "* What should be $v_c$ and $\\delta_c$?\n",
        "* When should $\\delta$ change from 0 and back?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-U-6NqIoD5b2"
      },
      "source": [
        "v_c = 1 # m/s\n",
        "delta_c = np.pi/6 # rad/s\n",
        "\n",
        "#calculate time taken to finish a quarter turn (pi/2)\n",
        "# unlike you would need to take into account v_c and L of the vehicle as well\n",
        "w = (v_c/0.9)*np.tan(delta_c) \n",
        "t_turn = np.ceil((np.pi/2)/w).astype('int')\n",
        "\n",
        "#calculate the time taken to finish straight segments\n",
        "# omega array is to be padded with equivalent zeros\n",
        "\n",
        "t_straight1, t_straight2, t_straight3 = 10, 5, 8\n",
        "\n",
        "all_delta = [0]*t_straight1 + [delta_c]*t_turn + \\\n",
        "            [0]*t_straight2 + [delta_c]*t_turn + \\\n",
        "            [0]*t_straight3 + [-delta_c]*t_turn\n",
        "all_v = v_c*np.ones_like(all_delta)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lI-eXKo9D5b3"
      },
      "source": [
        "Let us make a cool function out of this!\n",
        "\n",
        "Take in as input a generic route and convert it into open-loop commands\n",
        "\n",
        "Input format: [(\"straight\", 5), (\"right\", 90), (\"straight\", 6), (\"left\", 85)]\n",
        "\n",
        "Output: all_v, all_delta"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dydnwuPmD5b4"
      },
      "source": [
        "def get_open_loop_commands(route, vc, deltac):\n",
        "    all_delta = []\n",
        "\n",
        "    omegas = {'straight':0, 'left':deltac, 'right':-deltac}\n",
        "    for manoeuvre,command in route:\n",
        "      u = np.ceil(command/vc).astype('int')\n",
        "      w = (vc/0.9)*np.tan(deltac)\n",
        "      v = np.ceil(np.deg2rad(command)/w).astype('int')\n",
        "      t_cmd = u if manoeuvre == 'straight' else v\n",
        "      all_delta +=  [omegas[manoeuvre]]*t_cmd\n",
        "    all_delta.append(all_delta.pop(0))\n",
        "    all_v =  vc*np.ones_like(all_delta)\n",
        "    \n",
        "    return all_v, all_delta"
      ],
      "execution_count": 92,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wPg13GHQD5b5"
      },
      "source": [
        "### Unit test your function with the following inputs\n",
        "\n",
        "+ [(\"straight\", 5), (\"right\", 90), (\"straight\", 6), (\"left\", 85)]\n",
        "+ $v_c = 1$\n",
        "+ $delta_c = \\pi/12$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ga3MspwND5b5"
      },
      "source": [
        "all_v, all_delta = get_open_loop_commands([(\"straight\", 5), (\"right\", 90), (\"straight\", 6), (\"left\", 85)], 1, np.pi/12)"
      ],
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gW_h4cHtFgC7",
        "outputId": "79104a91-cfff-45ab-dccf-8e7b8cb3f026"
      },
      "source": [
        "len(all_v)"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "22"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "elCuQPcsD5b6"
      },
      "source": [
        "robot_trajectory = []\n",
        "pose = np.array([0, 0, np.pi/2])\n",
        "robot_trajectory.append(pose)\n",
        "for v, w in zip(all_v, all_delta):\n",
        "    #instruction to take v, w and compute new pose    \n",
        "    pose = bicycle_model(pose, v, w, 0.88)\n",
        "    robot_trajectory.append(pose)\n",
        "    # store new pose\n",
        "robot_trajectory = np.array(robot_trajectory)"
      ],
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qK5s5Em9D5b6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "e4289aaa-8c3f-4b4e-d9ed-c425f60b3acb"
      },
      "source": [
        "# plot robot trajectory\n",
        "xi, yi, _ = robot_trajectory[0]\n",
        "xf, yf, _ = robot_trajectory[-1]\n",
        "\n",
        "plt.figure()\n",
        "plt.axes().set_aspect(\"equal\", \"datalim\")\n",
        "plt.plot(xi, yi, 'r+', ms=10)\n",
        "plt.plot(robot_trajectory[:, 0], robot_trajectory[:,1])\n",
        "plt.plot(xf, yf, 'r+', ms=10)\n",
        "#plt.plot( )\n",
        "\n",
        "#show first and last robot positions with + markers\n",
        "# example: plt.plot(0, 0, 'r+', ms=10)\n"
      ],
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f8bd7435c90>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 104
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H-ecY7zbD5b7"
      },
      "source": [
        "### Shape the turn\n",
        "Let us try something cooler than before (though a bit tricky in open loop). Instead of boring circular arcs, change the steering angle so that the robot orientation changes as shown in the equation below\n",
        "\n",
        "$\\theta = (\\theta_i - \\theta_f) * (1 - 3x^2 + 2\\theta^3) + \\theta_f  \\thinspace \\vee x \\in [0,1]$\n",
        "\n",
        "First let us plot this"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DQbmFZmXD5b8"
      },
      "source": [
        "def poly_turn(theta_i, theta_f, n=10):\n",
        "    x = np.linspace(0, 1, num=n)\n",
        "    return (theta_i-theta_f) * (1 - 3 * x * x + 2 * (x**3)) + theta_f"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "58KMj70TD5b9"
      },
      "source": [
        "How does a right turn look? "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7INgEBQvD5b9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "641a2d0d-8bef-4a30-e283-1cb7620413ad"
      },
      "source": [
        "plt.figure()\n",
        "plt.plot(poly_turn(np.pi/2, 0),'.')\n",
        "plt.plot(poly_turn(np.pi/2, 0))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f25a4849b90>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gk546i4HD5b-"
      },
      "source": [
        "Now plot a left turn (North to East)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MIcpSAHhD5b_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "3dcd2136-c581-418c-c1ab-030c4d405083"
      },
      "source": [
        "plt.figure()\n",
        "plt.plot(poly_turn(-np.pi/2,0),'.')\n",
        "plt.plot(poly_turn(-np.pi/2,0))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f25a483d9d0>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rj670M1aD5b_"
      },
      "source": [
        "How does $\\theta$ change when we had constant $\\delta$? Plot it"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ywtHa7z3D5cA"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7QGyMtTxD5cA"
      },
      "source": [
        "We know the rate of change of $\\theta$ is proportional to $\\delta$. Can you work out the sequence of $\\delta$ to change $\\theta$ as in the cubic polynomial shown above?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UZ590VkxD5cA"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}