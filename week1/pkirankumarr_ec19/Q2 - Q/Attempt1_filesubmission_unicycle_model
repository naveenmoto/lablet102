{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.1"
    },
    "varInspector": {
      "cols": {
        "lenName": 16,
        "lenType": 16,
        "lenVar": 40
      },
      "kernels_config": {
        "python": {
          "delete_cmd_postfix": "",
          "delete_cmd_prefix": "del ",
          "library": "var_list.py",
          "varRefreshCmd": "print(var_dic_list())"
        },
        "r": {
          "delete_cmd_postfix": ") ",
          "delete_cmd_prefix": "rm(",
          "library": "var_list.r",
          "varRefreshCmd": "cat(var_dic_list()) "
        }
      },
      "position": {
        "height": "144px",
        "left": "1090px",
        "right": "20px",
        "top": "13px",
        "width": "350px"
      },
      "types_to_exclude": [
        "module",
        "function",
        "builtin_function_or_method",
        "instance",
        "_Feature"
      ],
      "window_display": true
    },
    "colab": {
      "name": "unicycle_model.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "TLKq0ocbbQ-_"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib notebook\n",
        "import doctest\n",
        "import copy"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gMVeRLV9bQ_C"
      },
      "source": [
        "#https://stackoverflow.com/questions/40137950/possible-to-run-python-doctest-on-a-jupyter-cell-function\n",
        "def test(func):\n",
        "    '''\n",
        "    Use test as a decorator to a function with doctests in Jupyter notebook. \n",
        "    Run the cell to see the results of the doctests.\n",
        "    '''\n",
        "    globs = copy.copy(globals())\n",
        "    globs.update({func.__name__:func})\n",
        "    doctest.run_docstring_examples(func, globs, verbose=True, name=func.__name__)\n",
        "    return func"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vXuwi8ZxbQ_D"
      },
      "source": [
        "### Simulate straight line and circular movements with Unicycle model\n",
        "\n",
        "Robot is at the origin (0, 0) and facing North, i.e, $\\theta = \\pi/2$\n",
        "\n",
        "Use the Kinematics equations we had developed in class for the Unicycle model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TnKQ3ANMbQ_E",
        "outputId": "3a32b72b-0a4e-4ba8-d0ef-40337369c121"
      },
      "source": [
        "#uncomment this decorator to test your code\n",
        "@test \n",
        "def unicycle_model(curr_pose, v, w, dt=1.0):\n",
        "    '''\n",
        "    >>> unicycle_model((0.0,0.0,0.0), 1.0, 0.0)\n",
        "    (1.0, 0.0, 0.0)\n",
        "    >>> unicycle_model((0.0,0.0,0.0), 0.0, 1.0)\n",
        "    (0.0, 0.0, 1.0)\n",
        "    >>> unicycle_model((0.0, 0.0, 0.0), 1.0, 1.0)\n",
        "    (1.0, 0.0, 1.0)\n",
        "    '''\n",
        "    ## write code to calculate next_pose\n",
        "    # refer to the kinematic equations of a unicycle model\n",
        "    x, y, theta = curr_pose\n",
        "    x += v*np.cos(theta)*dt\n",
        "    y += v*np.sin(theta)*dt\n",
        "    theta += w*dt\n",
        "    \n",
        "    # Keep theta bounded between [-pi, pi]\n",
        "    theta = np.arctan2(np.sin(theta), np.cos(theta))\n",
        "    # return calculated (x, y, theta)\n",
        "    return x, y, theta"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "PYDEV DEBUGGER WARNING:\n",
            "sys.settrace() should not be used when the debugger is being used.\n",
            "This may cause the debugger to stop working correctly.\n",
            "If this is needed, please check: \n",
            "http://pydev.blogspot.com/2007/06/why-cant-pydev-debugger-work-with.html\n",
            "to see how to restore the debug tracing back correctly.\n",
            "Call Location:\n",
            "  File \"/usr/lib/python3.7/doctest.py\", line 1487, in run\n",
            "    sys.settrace(save_trace)\n",
            "\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Finding tests in unicycle_model\n",
            "Trying:\n",
            "    unicycle_model((0.0,0.0,0.0), 1.0, 0.0)\n",
            "Expecting:\n",
            "    (1.0, 0.0, 0.0)\n",
            "ok\n",
            "Trying:\n",
            "    unicycle_model((0.0,0.0,0.0), 0.0, 1.0)\n",
            "Expecting:\n",
            "    (0.0, 0.0, 1.0)\n",
            "ok\n",
            "Trying:\n",
            "    unicycle_model((0.0, 0.0, 0.0), 1.0, 1.0)\n",
            "Expecting:\n",
            "    (1.0, 0.0, 1.0)\n",
            "ok\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FMvACftPbQ_E"
      },
      "source": [
        "Now let us try to simulate motion along a straight line and circle\n",
        "\n",
        "Look at the kinematics equations you wrote - what should $v,\\omega$ if\n",
        "+ There is no change in $\\theta$\n",
        "+ $\\theta$ has to change from 0 to 360 degrees"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xga_LLAsbQ_F"
      },
      "source": [
        "#straight line\n",
        "straight_trajectory = []\n",
        "pose = (0, 0, np.pi/2)\n",
        "steps = 10\n",
        "#fill in v and omega values\n",
        "v = 1\n",
        "w = 0\n",
        "\n",
        "for _ in range(steps):\n",
        "   #instruction to take v, w and compute new pose    \n",
        "    straight_trajectory.append(pose)\n",
        "    pose = unicycle_model(pose, v, w)\n",
        "   # store new pose\n",
        "straight_trajectory = np.array(straight_trajectory)\n",
        "    "
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UHLKXFk7bQ_F"
      },
      "source": [
        "#circle\n",
        "circle_trajectory = []\n",
        "pose = (0, 0, np.pi/2)\n",
        "steps = 10\n",
        "#fill in v and omega values\n",
        "all_v = np.ones(steps*100)\n",
        "all_w = np.ones(steps*100)\n",
        "for v,w in zip(all_v, all_w):\n",
        "    #instruction to take v, w and compute new pose    \n",
        "    circle_trajectory.append(pose)\n",
        "    pose = unicycle_model(pose, v, w, 0.1)\n",
        "   # store new pose\n",
        "circle_trajectory = np.array(circle_trajectory)\n"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "TgpO1krxbQ_G",
        "outputId": "51464614-96f5-4e21-9185-065060c839cf"
      },
      "source": [
        "### Plot straight and circular trajectories\n",
        "plt.figure()\n",
        "plt.axes().set_aspect(\"equal\", \"datalim\")\n",
        "plt.plot(straight_trajectory[:, 0], straight_trajectory[:,1])\n",
        "\n",
        "\n",
        "plt.figure()\n",
        "plt.axes().set_aspect(\"equal\", \"datalim\")\n",
        "plt.plot(circle_trajectory[:, 0], circle_trajectory[:,1])\n"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f1c080c5050>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Icv2OVPXbQ_H"
      },
      "source": [
        "### Simulate Unicycle model with Open Loop control\n",
        "\n",
        "We want the robot to follow these instructions\n",
        "\n",
        "**straight 10m, right turn, straight 5m, left turn, straight 8m, right turn**\n",
        "\n",
        "It is in open loop; control commands have to be calculated upfront. How do we do it?\n",
        "\n",
        "To keep things simple in the first iteration, we can fix $v = v_c$ and change only $\\omega$. To make it even simpler, $\\omega$ can take only 2 values \n",
        "+ 0 when the vehicle is going straight \n",
        "+ $\\omega = \\omega_c$ when turning\n",
        "\n",
        "This leaves only 2 questions to be answered\n",
        "* What should be $v_c$ and $\\omega_c$?\n",
        "* When should $\\omega$ change from 0 and back?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8nzn_LEtbQ_H"
      },
      "source": [
        "v_c = 1 # m/s\n",
        "w_c = np.pi/6 # rad/s\n",
        "\n",
        "#calculate time taken to finish a quarter turn (pi/2)\n",
        "t_turn = 3\n",
        "\n",
        "#calculate the time taken to finish straight segments\n",
        "# omega array is to be padded with equivalent zeros\n",
        "\n",
        "t_straight1, t_straight2, t_straight3 = (10, 5, 8)\n",
        "\n",
        "all_w = [0]*t_straight1 + [-w_c]*t_turn + \\\n",
        "        [0]*t_straight2 + [w_c]*t_turn + \\\n",
        "        [0]*t_straight3 + [-w_c]*t_turn\n",
        "all_v = v_c*np.ones_like(all_w)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YoqqZpHhbQ_I"
      },
      "source": [
        "Let us make a cool function out of this!\n",
        "\n",
        "Take in as input a generic route and convert it into open-loop commands\n",
        "\n",
        "Input format: [(\"straight\", 5), (\"right\", 90), (\"straight\", 6), (\"left\", 85)]\n",
        "\n",
        "Output: all_v, all_w"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GZgCnsgubQ_I"
      },
      "source": [
        "def get_open_loop_commands(route, vc=1, wc=np.pi/12):\n",
        "    all_w = []\n",
        "    \n",
        "    omegas = {'straight':0, 'left':wc, 'right':-wc}\n",
        "    for manoeuvre,command in route:\n",
        "      u = np.ceil(command/vc).astype('int')\n",
        "      v = np.ceil(np.deg2rad(command)/wc).astype('int')\n",
        "      t_cmd = u if manoeuvre == 'straight' else v\n",
        "      all_w +=  [omegas[manoeuvre]]*t_cmd\n",
        "    all_w.append(all_w.pop(0))\n",
        "    all_v =  vc*np.ones_like(all_w)\n",
        "\n",
        "    return all_v, all_w"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iPUaQWoSbQ_I"
      },
      "source": [
        "### Unit test your function with the following inputs\n",
        "\n",
        "+ [(\"straight\", 5), (\"right\", 90), (\"straight\", 6), (\"left\", 85)]\n",
        "+ $v_c = 1$\n",
        "+ $w_c = \\pi/12$"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q7ML8T2TbQ_J"
      },
      "source": [
        "all_v, all_w = get_open_loop_commands([(\"straight\", 5), (\"right\", 90), (\"straight\", 6), (\"left\", 85)], 1, np.pi/12)"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KPY77f-mz5FP",
        "outputId": "80422c0a-8561-4568-a0e9-c2d0093f32cf"
      },
      "source": [
        "len(all_v)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "23"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "16GeIdIzbQ_J"
      },
      "source": [
        "robot_trajectory = []\n",
        "pose = np.array([0, 0, np.pi/2])\n",
        "robot_trajectory.append(pose)\n",
        "for v, w in zip(all_v, all_w):\n",
        "  #instruction to take v, w and compute new pose    \n",
        "  pose = unicycle_model(pose, v, w)\n",
        "  robot_trajectory.append(pose)\n",
        "  # store new pose\n",
        "robot_trajectory = np.array(robot_trajectory)"
      ],
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "dm6S9C4XzuaS",
        "outputId": "99133472-44cd-4e34-c07a-8b723c6ea0eb"
      },
      "source": [
        "# plot robot trajectory\n",
        "xi, yi, _ = robot_trajectory[0]\n",
        "xf, yf, _ = robot_trajectory[-1]\n",
        "\n",
        "plt.figure()\n",
        "plt.axes().set_aspect(\"equal\", \"datalim\")\n",
        "plt.plot(xi, yi, 'r+', ms=10)\n",
        "plt.plot(robot_trajectory[:, 0], robot_trajectory[:,1])\n",
        "plt.plot(xf, yf, 'r+', ms=10)\n",
        "#plt.plot( )\n",
        "\n",
        "#show first and last robot positions with + markers\n",
        "# example: plt.plot(0, 0, 'r+', ms=10)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f1c0793a410>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NiNpp-dwbQ_O"
      },
      "source": [
        "### Improved capabilities!\n",
        "\n",
        "+ Slow the robot while turning ($v_c$ for turn and straight needed)\n",
        "\n",
        "+ How to accommodate a sampling time < 1.0s (hint: think of sampling instances instead of time)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X75L58XcbQ_P"
      },
      "source": [
        "def get_(route, vc=1, wc=np.pi/12):\n",
        "    all_w = []\n",
        "    all_v = []\n",
        "    omegas = {'straight':0, 'left':wc, 'right':-wc}\n",
        "    for manoeuvre,command in route:\n",
        "      u = np.ceil(command/vc).astype('int')\n",
        "      v = np.ceil(np.deg2rad(command)/wc).astype('int')\n",
        "      if manoeuvre =='straight':\n",
        "        all_w += 0\n",
        "        all_v += vc\n",
        "      else :\n",
        "        t_cmd = u if manoeuvre == 'straight' else v\n",
        "        all_w +=  [omegas[manoeuvre]]*t_cmd\n",
        "        all_v = vc/10\n",
        "    all_w.append(all_w.pop(0))\n",
        "      \n",
        "    return all_v, all_w\n",
        "\n"
      ],
      "execution_count": 12,
      "outputs": []
    }
  ]
}